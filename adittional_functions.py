import requests
import json
import random
from shapely.geometry import Point

# Calling the OpenStreetMap API and using json library to get the content about routes between two locations
def driving_time(lat_1, lon_1, lat_2, lon_2):
    """
    Parameters are two spots longitude and latitude

    Returns the driving distance from 1 to 2 in seconds.
    """
    r = requests.get(
        f"""http://router.project-osrm.org/route/v1/car/{lon_1},{lat_1};{lon_2},{lat_2}?overview=false"""
    )

    # routes can have more than one alternative route but we choose the first one which is the better one
    routes = json.loads(r.content)["routes"][0]

    return routes["duration"]  # returns the driving duration in seconds


def coordinate_generator(area, nr):
    """
    Generates a random location coordinates bettwen the given geographical limits of the area
    Area is a polygon generated by chosen locations
    nr indicates the number of locations already created.
    Locations will be generated in smaller areas within the area in order to better distribute people.
    """
    m = [
        [1, 0, 1, 0],
        [1, 0, 0, 1],
        [0, 1, 0, 1],
        [0, 1, 1, 0],
    ]  # These are four combinations where each defines a quarter of the area
    westernmost, southernmost, easternmost, northernmost = area.bounds
    # Every four locations in a row will be distributed in four different areas reducing in half the boundaries
    random_point = Point(
        [
            round(
                random.uniform(
                    westernmost + ((easternmost - westernmost) / 2 * (m[(nr % 4)][0])),
                    easternmost - ((easternmost - westernmost) / 2 * (m[(nr % 4)][1])),
                ),
                6,
            ),
            round(
                random.uniform(
                    southernmost + ((easternmost - westernmost) / 2 * (m[(nr % 4)][2])),
                    northernmost - ((easternmost - westernmost) / 2 * (m[(nr % 4)][3])),
                ),
                6,
            ),
        ]
    )
    if random_point.within(
        area
    ):  # It can happen that a point is within the boundaries but not inside the area
        return {"lat": random_point.x, "lon": random_point.y}
    else:
        return coordinate_generator(area, nr)
